Command: ninja all
[1/11] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[2/11] Performing build step for 'bootloader'
[1/1] cd /project/dual-core-test/build/bootloader/esp-idf/esptool_py && /opt/esp/python_env/idf6.0_py3.12_env/bin/python /opt/esp/idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /project/dual-core-test/build/bootloader/bootloader.bin
Bootloader binary size 0x66a0 bytes. 0x960 bytes (8%) free.
[3/11] No install step for 'bootloader'
[4/11] Completed 'bootloader'
[5/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/dual_core_test.c.obj
[6/11] Linking C static library esp-idf/main/libmain.a
[7/11] Generating esp-idf/esp_system/ld/sections.ld
[8/11] Building C object CMakeFiles/dual_core_test.elf.dir/project_elf_src_esp32.c.obj
[9/11] Linking CXX executable dual_core_test.elf
[10/11] Generating binary image from built executable
esptool.py v4.9.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /project/dual-core-test/build/dual_core_test.bin
[11/11] cd /project/dual-core-test/build/esp-idf/esptool_py && /opt/esp/python_env/idf6.0_py3.12_env/bin/python /opt/esp/idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /project/dual-core-test/build/partition_table/partition-table.bin /project/dual-core-test/build/dual_core_test.bin
dual_core_test.bin binary size 0x2ba80 bytes. Smallest app partition is 0x100000 bytes. 0xd4580 bytes (83%) free.
